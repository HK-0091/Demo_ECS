240627
0. Container_Move()함수를 통해 작업 지시 및 1번 변수에 작업 아이디 담기
1. 0번으로 인해 담긴 Container_Start_Move, Container_Finished_Move 아이디
변수 값을 통해 작업 아아디를 2번 함수를 통해 검색
2. Fork_startStatus(), Fork_EndStatus() 함수를 통해 상태 값을 가져와
해당 데이터를 파싱
3. 2번을 setInterval를 통해 얻은 파싱 값을 지속적으로 확인해 FINISHED가 
나오면 DB수정 및 setInterval 종료

체크사항
1. fork middle height 부분의 bintask가 port부분은 실행이 안된다
    1.1 RDS에서 확인해본 결과 path를 찾을 수 없다고 함(경로)

작업사항
1. UI/UX 밑그림 작업

*******************************************************************************************

240701
1. group을 사용해 AMR을 작동하였으나, CPD-15T가 bintask를 제대로 동작하지 못하는 증상이 나타남

*******************************************************************************************

240809
아래 과정은 sqlite3 및 setInterval의 비동기 작업으로 인한 버그를 우회하기 위한 테스트이다.

0.RDS CORE 164 -> 20 으로 수정됨

(1번 테스트)
*RDS CORE와 WebSocket 연결 성공 

1. Send 클릭 시 웹소켓 실행

2. CDD16의 json 부분을 파싱하여 작업의 완료를 테스트
    2.1 일단 작업 시 어떻게 데이터가 들어가는지 확인필요(From, to)

3 from과 to의 작업 부분 파싱 후 해당 작업이 true?가 되면 sqlite3 수정하는 걸로

* Fork_Status_Interval_Start의 함수는 필요 없어짐 싹 다 지우면 됨. 
    Fork_Status_Interval_Start(table_name_load, port_id_load);
    Fork_Status_Interval_End(table_name_unload, port_id_unload);
    이거 두개 다 지우면 됨. 

4. 수정이 완료되면 러닝테스트 모달창 닫고 웹소켓 닫고 sqlite3 닫기

(2번 테스트)
1. send를 눌러 작업 보내기
    1.1 변수 2개를 생성하기 "let from_complete = false;", "let to_complete = false;" 형식으로
    1.2 해당 2개의 변수를 인터벌(A)로 작업의 완료 여부 판단
    1.3 각각 작업 완료시 from, to 변수 값을 true로 수정
    1.4 인터벌에서 true로 인식 완료시 인터벌(A) 종료 및 웹소켓으로 클라이언트에게 
        let table_name_load;
        let port_id_load;
        let table_name_unload;
        let port_id_unload;
        제이슨 형태로 데이터 전달하기
        (위 내용중 2개의 변수가 전달 됨 Rack->Port, Port->Rack 으로 이동하니까)

2. 웹소켓으로 받은 위 데이터 2개를 파싱해 다시 ajax를 통해 서버로 전달
    2.1 클라이언트에게 전달받기 위해 관련 
    Path(app.post("/Path",(req, res)=>{})) 생성되어 있어야함.

3. 서버에서 생성한 Path로 데이터를 파싱해 sqlite3 수정하기
    3.1 해당 Path는 sqlite3 를 수정하기 위한 로직으로 구성되어야 한다.

* 8월 12일(월) 로봇 바로 실행 가능하게는 설정해두었으며, 확인 필요

*******************************************************************************************

240821

작업완료
1. port의 배경 색을 가져와 TPMA, TPMB 구분
    1.1 send data 클릭 시 Rack -> port 이동시에 팔레트 사이즈에 따라 port 가능 여부 구분해 놓음
2. DB 추가시에 port(A, B, C, D) 사이즈 별로 구별해 제안을 둠


작업중
1. ECS_N.js에 Container_Move() 함수 수정하면 된다.
    1.1 resolve로 받아온 변수값을 활용해 Container_Move() 수정하면 된다.
2. Roboshop pro 맵 하나 만들어서 작업하기
3. 알람 창 만들고 알람 작업

이후작업
1. 소켓통신으로 데이터 받아오는거 테스트
    1.1 sqlite3 수정하는거 테스트

*********************************************************************
240830

작성 완료, 테스트 필요
1. PORT_To_RACK(), RACK_To_PORT() 함수 생성
    1.1 port_id_load[0]의 값이 숫자냐 문자냐에 따라 두 함수중 택1
        1.1.1 port_id_load는 "1-1" or "A" 형식이다.
2. Roboshop Pro에서 ECS_240829_R0_KKH.smap을 기준으로 위 두 함수 작성
    2.1 두 함수 실행 테스트 진행하기

이후 진행
1. 소켓 통신 테스트
    1.1 소켓 통신을 통해 로봇의 작업 실행 현황 데이터 가져오기
    1.2 해당 데이터를 통해 sqlite3 수정해보기
        1.2.1 수정이 안된다면 send 후 Running Task 창 이후에
                작업 완료 후 버튼을 클릭해 DB 수정하게 변경하기
2. Running Task에서 Cancle 버튼 클릭하면 작업 취소되게하기    

240907
1. 소켓 물건 들어올리고 내리는거 콘솔 잘 넘어오는지 확인
2. 실행시에 DB 수정 못하게 시작 모달창에서 Cancle 누르면 작업 취소되게하면 될듯
3. let Robot_blocks = JSON.stringify(Robot_Status.report[0].current_order.blocks);
부분 파싱 다시한 번 확인하기

240908
1. 소켓 끄고 일단 설정한 흐름대로 로봇이 잘 진행하는지 확인
2. 상태값 올리고 내리고 잘 받아오는지 확인
3. 올리고 내릴대 SQLite3 잘 적용 되는지 확인

1. TPMB, TPMA가 화면에 없으면 클릭이 안되게 하기
2. 소켓으로 1번 DB수정 되면 되는데 지속적으로 DB가 수정 되어 트래픽 문제가 발생
	2.1 GPT 내용 참고하기
	
 	2.2 변수 2개 생성하기 Load, Unload 실행, 미실행 용도
		-한 사이클이 끝나면 Load, Unload 모두 실행 안되게 막기 
	2.3 화면 SEND DATA 클릭 시 해당 변수 값을 원복 시켜 실행 가능하게 적용시키기